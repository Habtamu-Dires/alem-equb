BEGIN;

-- user
CREATE TABLE IF NOT EXISTS public._user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id character varying(255)  NOT NULL,
    created_date timestamp(6) without time zone NOT NULL,
    email character varying(255) ,
    enabled boolean NOT NULL,
    first_name character varying(255) ,
    id_card_image_url character varying(255) ,
    last_modified_date timestamp(6) without time zone,
    last_name character varying(255) ,
    national_id integer,
    password character varying(255),
    phone_number character varying(255)  NOT NULL,
    profession character varying(255) ,
    profile_pic_url character varying(255),
    remark character varying(255),
    username character varying(255) ,
    CONSTRAINT _user_pkey PRIMARY KEY (id),
    CONSTRAINT uq_user_external_id UNIQUE (external_id),
    CONSTRAINT uq_phone_number UNIQUE (phone_number),
    CONSTRAINT uq_email UNIQUE (email),
    CONSTRAINT uq_username UNIQUE (username)
);

CREATE INDEX idx_user_external_id ON public._user (external_id);

-- ekub
CREATE TABLE IF NOT EXISTS public.ekub
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id uuid NOT NULL,
    created_by character varying(255)  NOT NULL,
    created_date timestamp(6) without time zone NOT NULL,
    last_modified_by character varying(255) ,
    last_modified_date timestamp(6) without time zone,
    active boolean NOT NULL,
    amount numeric(38, 2),
    archived boolean NOT NULL,
    description text ,
    exclusive boolean NOT NULL,
    frequency_in_days integer,
    last_draw_date_time timestamp(6) without time zone,
    name character varying(255) ,
    next_draw_date_time timestamp(6) without time zone,
    penalty_percent_per_day double precision NOT NULL,
    round_number integer,
    start_date_time timestamp(6) without time zone,
    total_amount numeric(38, 2),
    type character varying(255) ,
    version integer,
    CONSTRAINT ekub_pkey PRIMARY KEY (id),
    CONSTRAINT uq_ekub_name UNIQUE (name),
    CONSTRAINT uq_ekub_external_id UNIQUE (external_id)
);

CREATE INDEX idx_ekub_external_id ON public.ekub (external_id);

-- ekub_user
CREATE TABLE IF NOT EXISTS public.ekub_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id uuid NOT NULL,
    created_by character varying(255)  NOT NULL,
    created_date timestamp(6) without time zone NOT NULL,
    last_modified_by character varying(255),
    last_modified_date timestamp(6) without time zone,
    ekub_id integer,
    user_id integer,
    CONSTRAINT eu_pkey PRIMARY KEY (id),
    CONSTRAINT uq_eu_external_id UNIQUE (external_id),
    CONSTRAINT fk_eu_user_id FOREIGN KEY (user_id)
        REFERENCES public._user (id),
    CONSTRAINT fk_eu_ekub_id FOREIGN KEY (ekub_id)
        REFERENCES public.ekub (id)
);

CREATE INDEX idx_eu_external_id ON public.ekub_user (external_id);

-- invitation
CREATE TABLE IF NOT EXISTS public.invitation
(
    user_id integer NOT NULL,
    ekub_id integer NOT NULL,
    CONSTRAINT fk_inv_user_id FOREIGN KEY (user_id)
            REFERENCES public._user (id),
    CONSTRAINT fk_inv_ekub_id FOREIGN KEY (ekub_id)
        REFERENCES public.ekub (id)
);

-- round
CREATE TABLE IF NOT EXISTS public.round
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id uuid NOT NULL,
    created_date_time timestamp(6) without time zone,
    end_date_time timestamp(6) without time zone,
    paid boolean NOT NULL,
    round_number integer,
    total_amount numeric(38, 2),
    version integer,
    ekub_id integer,
    winner_id integer,
    CONSTRAINT round_pkey PRIMARY KEY (id),
    CONSTRAINT uq_rd_external_id UNIQUE (external_id),
    CONSTRAINT fk_rd_ekub_id FOREIGN KEY (ekub_id)
        REFERENCES public.ekub (id),
    CONSTRAINT fk_rd_winner_id FOREIGN KEY (winner_id)
        REFERENCES public._user (id)
);

CREATE INDEX idx_rd_external_id ON public.round (external_id);

-- user guarantee

CREATE TABLE IF NOT EXISTS public.user_guarantee
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id uuid NOT NULL,
    created_by character varying(255) NOT NULL,
    created_date timestamp(6) without time zone NOT NULL,
    last_modified_by character varying(255),
    last_modified_date timestamp(6) without time zone,
    guaranteed_id integer,
    guarantor_id integer,
    round_id integer,
    CONSTRAINT user_guarantee_pkey PRIMARY KEY (id),
    CONSTRAINT uq_ug_external_id UNIQUE (external_id),
    CONSTRAINT fk_ug_round_id FOREIGN KEY (round_id)
        REFERENCES public.round (id),
    CONSTRAINT fk_ug_guarantor_id FOREIGN KEY (guarantor_id)
        REFERENCES public._user (id),
    CONSTRAINT fk_ug_guaranteed_id FOREIGN KEY (guaranteed_id)
        REFERENCES public._user (id)
);

CREATE INDEX idx_ug_external_id ON public.user_guarantee (external_id);

-- payment

CREATE TABLE IF NOT EXISTS public.payment
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    external_id uuid NOT NULL,
    created_by character varying(255) NOT NULL,
    created_date timestamp(6) without time zone NOT NULL,
    last_modified_by character varying(255),
    last_modified_date timestamp(6) without time zone,
    amount numeric(38, 2),
    payment_method character varying(255),
    remark character varying(255) ,
    type character varying(255) ,
    round_id integer,
    to_user_id integer,
    user_id integer,
    CONSTRAINT payment_pkey PRIMARY KEY (id),
    CONSTRAINT uq_pay_external_id UNIQUE (external_id),
    CONSTRAINT fk_pay_round_id FOREIGN KEY (round_id)
            REFERENCES public.round (id),
    CONSTRAINT fk_pay_user_id FOREIGN KEY (user_id)
        REFERENCES public._user (id),
    CONSTRAINT fk_pay_to_user_id FOREIGN KEY (to_user_id)
        REFERENCES public._user (id)
);

CREATE INDEX idx_pay_external_id ON public.payment (external_id);

END;