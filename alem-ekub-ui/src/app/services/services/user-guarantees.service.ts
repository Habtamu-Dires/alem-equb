/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { cancelGuarantee } from '../fn/user-guarantees/cancel-guarantee';
import { CancelGuarantee$Params } from '../fn/user-guarantees/cancel-guarantee';
import { guaranteeUser } from '../fn/user-guarantees/guarantee-user';
import { GuaranteeUser$Params } from '../fn/user-guarantees/guarantee-user';
import { isAllowedToBeGuarantor } from '../fn/user-guarantees/is-allowed-to-be-guarantor';
import { IsAllowedToBeGuarantor$Params } from '../fn/user-guarantees/is-allowed-to-be-guarantor';

@Injectable({ providedIn: 'root' })
export class UserGuaranteesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `guaranteeUser()` */
  static readonly GuaranteeUserPath = '/user-guarantee/{round-id}/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guaranteeUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  guaranteeUser$Response(params: GuaranteeUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return guaranteeUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guaranteeUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  guaranteeUser(params: GuaranteeUser$Params, context?: HttpContext): Observable<void> {
    return this.guaranteeUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `isAllowedToBeGuarantor()` */
  static readonly IsAllowedToBeGuarantorPath = '/user-guarantee/allowed-guarantor/{ekub-id}/{version}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isAllowedToBeGuarantor()` instead.
   *
   * This method doesn't expect any request body.
   */
  isAllowedToBeGuarantor$Response(params: IsAllowedToBeGuarantor$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResponse>> {
    return isAllowedToBeGuarantor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isAllowedToBeGuarantor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isAllowedToBeGuarantor(params: IsAllowedToBeGuarantor$Params, context?: HttpContext): Observable<BooleanResponse> {
    return this.isAllowedToBeGuarantor$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResponse>): BooleanResponse => r.body)
    );
  }

  /** Path part for operation `cancelGuarantee()` */
  static readonly CancelGuaranteePath = '/user-guarantee/cancel-guarantee/{round-id}/{guarantor-id}/{guaranteed-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelGuarantee()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelGuarantee$Response(params: CancelGuarantee$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return cancelGuarantee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelGuarantee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelGuarantee(params: CancelGuarantee$Params, context?: HttpContext): Observable<void> {
    return this.cancelGuarantee$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
