/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createEkub } from '../fn/ekubs/create-ekub';
import { CreateEkub$Params } from '../fn/ekubs/create-ekub';
import { deleteEkub } from '../fn/ekubs/delete-ekub';
import { DeleteEkub$Params } from '../fn/ekubs/delete-ekub';
import { EkubResponse } from '../models/ekub-response';
import { getCurrentRound } from '../fn/ekubs/get-current-round';
import { GetCurrentRound$Params } from '../fn/ekubs/get-current-round';
import { getEkubById } from '../fn/ekubs/get-ekub-by-id';
import { GetEkubById$Params } from '../fn/ekubs/get-ekub-by-id';
import { getPageOfEkubs } from '../fn/ekubs/get-page-of-ekubs';
import { GetPageOfEkubs$Params } from '../fn/ekubs/get-page-of-ekubs';
import { PageResponseEkubResponse } from '../models/page-response-ekub-response';
import { RoundResponse } from '../models/round-response';
import { searchEkubByName } from '../fn/ekubs/search-ekub-by-name';
import { SearchEkubByName$Params } from '../fn/ekubs/search-ekub-by-name';
import { updateEkub } from '../fn/ekubs/update-ekub';
import { UpdateEkub$Params } from '../fn/ekubs/update-ekub';

@Injectable({ providedIn: 'root' })
export class EkubsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getPageOfEkubs()` */
  static readonly GetPageOfEkubsPath = '/ekubs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfEkubs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfEkubs$Response(params?: GetPageOfEkubs$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseEkubResponse>> {
    return getPageOfEkubs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfEkubs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfEkubs(params?: GetPageOfEkubs$Params, context?: HttpContext): Observable<PageResponseEkubResponse> {
    return this.getPageOfEkubs$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseEkubResponse>): PageResponseEkubResponse => r.body)
    );
  }

  /** Path part for operation `updateEkub()` */
  static readonly UpdateEkubPath = '/ekubs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEkub()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEkub$Response(params: UpdateEkub$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateEkub(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEkub$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEkub(params: UpdateEkub$Params, context?: HttpContext): Observable<void> {
    return this.updateEkub$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createEkub()` */
  static readonly CreateEkubPath = '/ekubs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createEkub()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createEkub$Response(params: CreateEkub$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createEkub(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createEkub$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createEkub(params: CreateEkub$Params, context?: HttpContext): Observable<void> {
    return this.createEkub$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getEkubById()` */
  static readonly GetEkubByIdPath = '/ekubs/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEkubById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubById$Response(params: GetEkubById$Params, context?: HttpContext): Observable<StrictHttpResponse<EkubResponse>> {
    return getEkubById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEkubById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubById(params: GetEkubById$Params, context?: HttpContext): Observable<EkubResponse> {
    return this.getEkubById$Response(params, context).pipe(
      map((r: StrictHttpResponse<EkubResponse>): EkubResponse => r.body)
    );
  }

  /** Path part for operation `deleteEkub()` */
  static readonly DeleteEkubPath = '/ekubs/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteEkub()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEkub$Response(params: DeleteEkub$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteEkub(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteEkub$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEkub(params: DeleteEkub$Params, context?: HttpContext): Observable<void> {
    return this.deleteEkub$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchEkubByName()` */
  static readonly SearchEkubByNamePath = '/ekubs/search/by-name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchEkubByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchEkubByName$Response(params: SearchEkubByName$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EkubResponse>>> {
    return searchEkubByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchEkubByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchEkubByName(params: SearchEkubByName$Params, context?: HttpContext): Observable<Array<EkubResponse>> {
    return this.searchEkubByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EkubResponse>>): Array<EkubResponse> => r.body)
    );
  }

  /** Path part for operation `getCurrentRound()` */
  static readonly GetCurrentRoundPath = '/ekubs/current-round/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentRound()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentRound$Response(params: GetCurrentRound$Params, context?: HttpContext): Observable<StrictHttpResponse<RoundResponse>> {
    return getCurrentRound(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentRound$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentRound(params: GetCurrentRound$Params, context?: HttpContext): Observable<RoundResponse> {
    return this.getCurrentRound$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoundResponse>): RoundResponse => r.body)
    );
  }

}
