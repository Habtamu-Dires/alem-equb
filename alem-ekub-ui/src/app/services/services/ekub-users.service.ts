/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addEkubUser } from '../fn/ekub-users/add-ekub-user';
import { AddEkubUser$Params } from '../fn/ekub-users/add-ekub-user';
import { EkubResponse } from '../models/ekub-response';
import { getEkubsOfUser } from '../fn/ekub-users/get-ekubs-of-user';
import { GetEkubsOfUser$Params } from '../fn/ekub-users/get-ekubs-of-user';
import { getMemberDetail } from '../fn/ekub-users/get-member-detail';
import { GetMemberDetail$Params } from '../fn/ekub-users/get-member-detail';
import { joinEkub } from '../fn/ekub-users/join-ekub';
import { JoinEkub$Params } from '../fn/ekub-users/join-ekub';
import { leaveEkub } from '../fn/ekub-users/leave-ekub';
import { LeaveEkub$Params } from '../fn/ekub-users/leave-ekub';
import { MemberDetailResponse } from '../models/member-detail-response';
import { removeUser } from '../fn/ekub-users/remove-user';
import { RemoveUser$Params } from '../fn/ekub-users/remove-user';

@Injectable({ providedIn: 'root' })
export class EkubUsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `removeUser()` */
  static readonly RemoveUserPath = '/ekub-users/{ekub_id}/{user_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUser$Response(params: RemoveUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUser(params: RemoveUser$Params, context?: HttpContext): Observable<void> {
    return this.removeUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addEkubUser()` */
  static readonly AddEkubUserPath = '/ekub-users/{ekub_id}/{user_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addEkubUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEkubUser$Response(params: AddEkubUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addEkubUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addEkubUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEkubUser(params: AddEkubUser$Params, context?: HttpContext): Observable<void> {
    return this.addEkubUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `joinEkub()` */
  static readonly JoinEkubPath = '/ekub-users/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `joinEkub()` instead.
   *
   * This method doesn't expect any request body.
   */
  joinEkub$Response(params: JoinEkub$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return joinEkub(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `joinEkub$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  joinEkub(params: JoinEkub$Params, context?: HttpContext): Observable<void> {
    return this.joinEkub$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `leaveEkub()` */
  static readonly LeaveEkubPath = '/ekub-users/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `leaveEkub()` instead.
   *
   * This method doesn't expect any request body.
   */
  leaveEkub$Response(params: LeaveEkub$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return leaveEkub(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `leaveEkub$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  leaveEkub(params: LeaveEkub$Params, context?: HttpContext): Observable<void> {
    return this.leaveEkub$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMemberDetail()` */
  static readonly GetMemberDetailPath = '/ekub-users/member-detail/{ekub-id}/{version}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMemberDetail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberDetail$Response(params: GetMemberDetail$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MemberDetailResponse>>> {
    return getMemberDetail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMemberDetail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberDetail(params: GetMemberDetail$Params, context?: HttpContext): Observable<Array<MemberDetailResponse>> {
    return this.getMemberDetail$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MemberDetailResponse>>): Array<MemberDetailResponse> => r.body)
    );
  }

  /** Path part for operation `getEkubsOfUser()` */
  static readonly GetEkubsOfUserPath = '/ekub-users/equbs/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEkubsOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubsOfUser$Response(params: GetEkubsOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EkubResponse>>> {
    return getEkubsOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEkubsOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubsOfUser(params: GetEkubsOfUser$Params, context?: HttpContext): Observable<Array<EkubResponse>> {
    return this.getEkubsOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EkubResponse>>): Array<EkubResponse> => r.body)
    );
  }

}
