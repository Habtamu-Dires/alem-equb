/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addEkubUser } from '../fn/ekub-users/add-ekub-user';
import { AddEkubUser$Params } from '../fn/ekub-users/add-ekub-user';
import { EkubResponse } from '../models/ekub-response';
import { getDrawParticipants } from '../fn/ekub-users/get-draw-participants';
import { GetDrawParticipants$Params } from '../fn/ekub-users/get-draw-participants';
import { getEkubsOfUser } from '../fn/ekub-users/get-ekubs-of-user';
import { GetEkubsOfUser$Params } from '../fn/ekub-users/get-ekubs-of-user';
import { getEkubUsers } from '../fn/ekub-users/get-ekub-users';
import { GetEkubUsers$Params } from '../fn/ekub-users/get-ekub-users';
import { getEkubWinners } from '../fn/ekub-users/get-ekub-winners';
import { GetEkubWinners$Params } from '../fn/ekub-users/get-ekub-winners';
import { getRoundWinner } from '../fn/ekub-users/get-round-winner';
import { GetRoundWinner$Params } from '../fn/ekub-users/get-round-winner';
import { removeUser } from '../fn/ekub-users/remove-user';
import { RemoveUser$Params } from '../fn/ekub-users/remove-user';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class EkubUsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `removeUser()` */
  static readonly RemoveUserPath = '/ekub-users/{ekub_id}/{user_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUser$Response(params: RemoveUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUser(params: RemoveUser$Params, context?: HttpContext): Observable<void> {
    return this.removeUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addEkubUser()` */
  static readonly AddEkubUserPath = '/ekub-users/{ekub_id}/{user_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addEkubUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEkubUser$Response(params: AddEkubUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addEkubUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addEkubUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEkubUser(params: AddEkubUser$Params, context?: HttpContext): Observable<void> {
    return this.addEkubUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getEkubWinners()` */
  static readonly GetEkubWinnersPath = '/ekub-users/winners/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEkubWinners()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubWinners$Response(params: GetEkubWinners$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getEkubWinners(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEkubWinners$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubWinners(params: GetEkubWinners$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getEkubWinners$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `getRoundWinner()` */
  static readonly GetRoundWinnerPath = '/ekub-users/winner/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoundWinner()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoundWinner$Response(params: GetRoundWinner$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getRoundWinner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoundWinner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoundWinner(params: GetRoundWinner$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getRoundWinner$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getDrawParticipants()` */
  static readonly GetDrawParticipantsPath = '/ekub-users/participants/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDrawParticipants()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDrawParticipants$Response(params: GetDrawParticipants$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getDrawParticipants(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDrawParticipants$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDrawParticipants(params: GetDrawParticipants$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getDrawParticipants$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `getEkubsOfUser()` */
  static readonly GetEkubsOfUserPath = '/ekub-users/equbs/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEkubsOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubsOfUser$Response(params: GetEkubsOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EkubResponse>>> {
    return getEkubsOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEkubsOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubsOfUser(params: GetEkubsOfUser$Params, context?: HttpContext): Observable<Array<EkubResponse>> {
    return this.getEkubsOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EkubResponse>>): Array<EkubResponse> => r.body)
    );
  }

  /** Path part for operation `getEkubUsers()` */
  static readonly GetEkubUsersPath = '/ekub-users/ekub-users/{ekub-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEkubUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubUsers$Response(params: GetEkubUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getEkubUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEkubUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEkubUsers(params: GetEkubUsers$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getEkubUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

}
